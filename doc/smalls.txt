*smalls.txt* spot your cursor with simple search

Version: 0.5
Author : t9md <taqumd@gmail.com>
GitHub : https://github.com/t9md/vim-smalls
License: Creative Commons Attribution-ShareAlike 3.0 Unported
	http://creativecommons.org/licenses/by-sa/3.0/
==============================================================================
CONTENTS						    *smalls-contents*

       Introduction .................... |smalls-introduction|
       Mapping .............................. |smalls-mapping|
       Commands ............................ |smalls-commands|
       Variables .......................... |smalls-variables|
       Functions .......................... |smalls-functions|
       Keyboard ............................ |smalls-keyboard|
       Configuration Example ................ |smalls-example|
       Bug ...................................... |smalls-bug|
       Todo  ................................... |smalls-todo|
       Special Notes ........................... |smalls-note|
       Changelog .......................... |smalls-changelog|

==============================================================================
INTRODUCTION						*smalls-introduction*

Yet another cursor movement helper, simple but effective at least for me ;).
To exmplain simply, this is the plugin to spot cursor by
- Seach candidate and Jump with easymotion.

If you don't like this plugin?
It's ok, there are a lot of plugins like bellow.

   - easymotion
     https://github.com/Lokaltog/vim-easymotion
   - clever-f
     https://github.com/rhysd/clever-f.vim
   - sneak
     https://github.com/justinmk/vim-sneak

==============================================================================
MAPPINGS						    *smalls-mappings*

n_<Plug>(smalls)
n_<Plug>(smalls-all)
	smalls for current window area.
	<Plug>(smalls) is simply short version of <Plug>(smalls-all).
	Both keys are linked to same function.

n_<Plug>(smalls-forward)
	smalls for forward direction

n_<Plug>(smalls-backward)
	smalls for backward direction

x_<Plug>(smalls)
x_<Plug>(smalls-all)
x_<Plug>(smalls-forward)
x_<Plug>(smalls-backward)
	visual mode version

o_<Plug>(smalls)
o_<Plug>(smalls-all)
o_<Plug>(smalls-forward)
o_<Plug>(smalls-backward)
	operator mode version

==============================================================================
COMMANDS						    *smalls-commands*

*:Smalls* {direction}
	{direction} should be 'all', 'forward', 'backward'

==============================================================================
VARIABLES						   *smalls-variables*

*g:smalls_shade*
	Default: 1

	Set 0, if you want to disable shade effect.

*g:smalls_jump_keys*
	Default: ;ABCDEFGHIJKLMNOPQRSTUVWXYZ

	[NOTE] don't use lowercase letter, the jumpkey you entered is
	automatically converted uppercase by |toupper()| before matching
	target you want to jump.
	[NOTE] By default, first char is semicolon.
	This is useful to speedy choice of first target, but as side effect,
	you can't use ';' as search caracter.

*g:smalls_jump_trigger*
	Default: first character of |g:smalls_jump_keys|.

	You don't need to set this variable explicitly.
	If you use specific key to trigger jump screen, set
	ex) use <C-j> to show jump screen.
>
	let g:smalls_jump_keys = "\<C-j>"
<
*g:smalls_highlight*
	Default: {}

	|Dictionary| used to update default highlight.

	Format~
	{ "Color1": [[cterm, ctermbg, cterfg],[gui, guibg, guifg], ... }

	{Key} is the highlight name, shoud be one of the following.
      	 SmallsCandidate    used to current sewarching keyword
      	 SmallsJumpTarget   used to standout jump target
      	 SmallsCurrent      current searching keyword
      	 SmallsCursor       indicate last inputted char within keyword
      	 SmallsShade        used in shade effect

	{Value} is array to define actual color, should have two element.
	First element is for 'cterm', second element for 'gui'.
	[[ cterm, ctermbg, cterfg ],[ gui, guibg, guifg ] ]

	Example >
	" change JumpTarget color to 'red'
	let g:smalls_highlight = {
	      \ 'SmallsJumpTarget':
	      \     [['NONE', 'NONE', 'red'],[ 'bold', 'NONE', 'red']],
	      \ }
<
AutoShowJumpKeys~
Smalls provide feature to automatically show jump keys.
Let's say, you want to auto-show jump key after 1.0sec but only at least two
sarach characters are already inputed.
Following variables controll these behavior.
By default this feature is disabled.

*g:smalls_jump_keys_auto_show*
	Default: 0
	
	Set 1, to eanble auto-show-jump-keys fature.

*g:smalls_jump_keys_auto_show_timeout*
	Default: 0.5

	Specify second as |Float|. 
	If user didn't type any key for this time, automatically shown jump
	keys as long as user's imput exceed
	*g:smalls_jump_keys_auto_show_min_input_length* characters.

*g:smalls_jump_keys_auto_show_min_input_length*
	Default: 3

	Specify length which trigger auto-show-jump-keys timeout.
	For user input didn't exceed this length, timeout is not fired.
	See following example.

	Example-1 >
	" After user's input reach 3 chars, with 0.5sec timeout.
	let g:smalls_jump_keys_auto_show = 1
	let g:smalls_jump_keys_auto_show_timeout = 0.0
	let g:smalls_jump_keys_auto_show_min_input_length = 2
<
	Example-2 >
	" always auto-show-jump-keys after user input 2 chars.
	let g:smalls_jump_keys_auto_show = 1
	let g:smalls_jump_keys_auto_show_timeout = 0.0
	let g:smalls_jump_keys_auto_show_min_input_length = 2
<

==============================================================================
FUNCTIONS						   *smalls-functions*

*smalls#start(direction)*
	Main function for this plugin!
	{direction} should be 'all', 'forward', 'backward'

==============================================================================
KEYBOARD					             *smalls-keyboard*

Smalls use independent CLI to read user's imput.
I'll explain this plugin specific keyboard keybinding in this section.
In future, user can customize or |extend()| you own key with |Dictionary|.

CLI KEYBOARD~
cli-keyboard is basic keyboard used to search and trigger jump screen.
key map is following.

	| Key            | Actin               |
	| -------------- | ------------------- |
	| <C-h>          | do_delete           |
	| <BS>           | do_delete           |
	| <C-a>          | do_head             |
	| <C-e>          | do_end              |
	| <C-f>          | do_char_forward     |
	| <C-b>          | do_char_backward    |
	| <C-k>          | do_kill             |
	| <C-y>          | do_yank             |
	| <C-c>          | do_cancel           |
	| <Esc>          | do_cancel           |
	| <C-r>          | do_special        * |
	| <F2>           | do_excursion      * |
	| <Tab>          | do_candidate_next * |
	| <CR>           | do_jump_first       |
	| {jump_trigger} | do_jump             |

	* very experimental action "don't ask what" for a meanwhile ;).
==============================================================================
CONFIGURATION EXAMPLE					      *smalls-example*

set in your '.vimrc'
>
	" map normal-mode 's' for simple search
	nmap s <Plug>(smalls)
<
If you want separate 'forward' and 'backward'
>
	nmap s <Plug>(smalls-forward)
	nmap S <Plug>(smalls-backward)
<
If you want use 'visual' or 'operator' or both mode.
>
	omap s <Plug>(smalls-forward)
	omap S <Plug>(smalls-backward)
	xmap s <Plug>(smalls-forward)
	xmap S <Plug>(smalls-backward)
<
============================================================================
BUG								 *smalls-bug*

Jump-marker is accompalished by temporarily replace buffer with marker.
To avoid this temporal edit affect undo history, smalls use 'undojoin'.

To minimize this buffer editing effect to aff so 'undo' after
showing jump marker don't put cursor to original pos. This caused as the 
side-effect of 'undojoin' to minimize effect

marker

============================================================================
TODO								*smalls-todo*

* [x] jump between candidate with C-hjkl and C-n, C-p or <Tab> 
  and customizable
* specify search area
 - [x] harf-screen-above sk or S.
 - [x] harf-screen-below sj or s.
 - [decline] right-col s-h
 - [decline] left-col  s-l
* jump line with jump target on (screen middle col) or (screen left col)
* [x] skip folded area
* code cleanup [ 75 %]

============================================================================
SPECIAL NOTES							*smalls-note*

Unless Kim Silkeb√¶kken's great EasyMotion, 'smalls' would never be created.

   - EasyMotion
     https://github.com/Lokaltog/vim-easymotion

What I did is simply combine search feature to original great plugin.

==============================================================================
CHANGELOG						   *smalls-changelog*
2013-10-25:
	- initial release
==============================================================================
vim:tw=78:ts=8:ft=help:norl:
