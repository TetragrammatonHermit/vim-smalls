*smalls.txt* spot your cursor with simple search

Version: 0.9
Author : t9md <taqumd@gmail.com>
GitHub : https://github.com/t9md/vim-smalls
License: Creative Commons Attribution-ShareAlike 3.0 Unported
	http://creativecommons.org/licenses/by-sa/3.0/
==============================================================================
CONTENTS						    *smalls-contents*

       Introduction .................... |smalls-introduction|
       Mapping .............................. |smalls-mapping|
       Commands ............................ |smalls-commands|
       Variables .......................... |smalls-variables|
       Functions .......................... |smalls-functions|
       Keyboard ............................ |smalls-keyboard|
       Configuration Example ................ |smalls-example|
       FAQ ...................................... |smalls-faq|
       Bug ...................................... |smalls-bug|
       Todo  ................................... |smalls-todo|
       Special Notes ........................... |smalls-note|
       Changelog .......................... |smalls-changelog|

==============================================================================
INTRODUCTION						*smalls-introduction*

Yet another cursor movement helper, simple but effective at least for me ;).
To explain simply, this is the plugin to spot cursor by
- Seach candidate and Jump with easymotion.

If you don't like this plugin?
It's ok, there are a lot of plugins like bellow.

   - easymotion
     https://github.com/Lokaltog/vim-easymotion
   - clever-f
     https://github.com/rhysd/clever-f.vim
   - sneak
     https://github.com/justinmk/vim-sneak

==============================================================================
MAPPINGS						    *smalls-mappings*

n_<Plug>(smalls)
	smalls for current window area.

x_<Plug>(smalls)
	visual mode version

o_<Plug>(smalls)
	operator mode version

n_<Plug>(smalls-excursion)
x_<Plug>(smalls-excursion)
o_<Plug>(smalls-excursion)
	directly switch to excursion-mode after

==============================================================================
COMMANDS						    *smalls-commands*

*:Smalls*
	Command version.

==============================================================================
VARIABLES						   *smalls-variables*

*g:smalls_shade*
	Default: 1

	Set 0, if you want to disable shade effect.

*g:smalls_jump_keys*
	Default: ;ABCDEFGHIJKLMNOPQRSTUVWXYZ

	[NOTE] don't use lowercase letter, the jumpkey you entered is
	automatically converted uppercase by |toupper()| before matching
	target you want to jump.
	[NOTE] By default, first char is semicolon.
	This is useful to speedy choice of first target, but as side effect,
	you can't use ';' as search character.

*g:smalls_jump_trigger*
	Default: first character of |g:smalls_jump_keys|.

	You don't need to set this variable explicitly.
	If you use specific key to trigger jump screen, set
	ex) use <C-j> to show jump screen.
>
	let g:smalls_jump_keys = "\<C-j>"
<
*g:smalls_highlight*
	Default: {}

	|Dictionary| used to update default highlight.

	Format~
	{ "Color1": [[cterm, ctermbg, cterfg],[gui, guibg, guifg], ... }

	{Key} is the highlight name, should be one of the following.
      	 SmallsCandidate    used to current searching keyword
      	 SmallsJumpTarget   used to standout jump target
      	 SmallsCurrent      current searching keyword
      	 SmallsPos          used to standout original pos
      	 SmallsShade        used in shade effect

	{Value} is array to define actual color, should have two element.
	First element is for 'cterm', second element for 'gui'.
	[[ cterm, ctermbg, cterfg ],[ gui, guibg, guifg ] ]

	Example >
	" change JumpTarget color to 'red'
	let g:smalls_highlight = {
	      \ 'SmallsJumpTarget':
	      \     [['NONE', 'NONE', 'red'],[ 'bold', 'NONE', 'red']],
	      \ }
<
*g:smalls_blink_on_notfound*
	Default: 1

	Blink original cursor position when pattern inputted not found.
	This blinking is for notification and while blinking extra character
	you typed is consumed by smalls plugin, this is for avoiding extra
	char you typed mess buffer's content.

*g:smalls_exit_at_notfound*
	Default: 0

	If you set this value to 1, smalls exit immediately if search word was
	not found.

AutoJump~
Smalls provide feature to automatically show jump keys.
Let's say, you want to auto-show jump key after 1.0sec but only at least two
search characters are already inputed.
Following variables control these behavior.
By default this feature is disabled.

*g:smalls_auto_jump*
	Default: 0
	
	Set 1, to enable auto_jump feature

*g:smalls_auto_jump_timeout*
	Default: 0.5

	Specify second as |Float| 
	If user didn't type any key for this time, automatically shown jump
	keys as long as user's input exceed
	|g:smalls_auto_jump_min_input_length| characters.

*g:smalls_auto_jump_min_input_length*
	Default: 3

	Specify length which trigger auto-jump timeout.
	For user input didn't exceed this length, timeout is not fired.
	See following example.

	Example-1 >
	" After user's input reach 3 chars, with 0.5sec timeout.
	let g:smalls_auto_jump = 1
	let g:smalls_auto_jump_min_input_length = 3
	let g:smalls_auto_jump_timeout = 0.5
<
	Example-2 >
	" always auto-jump after user input 2 chars.
	let g:smalls_auto_jump = 1
	let g:smalls_auto_jump_min_input_length = 2
	let g:smalls_auto_jump_timeout = 0.0

*g:smalls_current_mode*
	Default: ''
	automatically updated while using smalls
	value should be one of [ '', 'cli', 'excursion' ]

	Don't set this variable manually, its meaningless since its'
	dynamically updated by plugin.
	This variable could be used in |statusline| or plugin like bellow
	  * powerline
	  * airline
	  * lightline
	  * ezbar ( I'm author )

*g:smalls_auto_excursion_min_input_length*
	Default: 1
	In '<Plug>(smalls-excursion)' and if input exceed this value,
	automatically enter excursion mode.

*g:smalls_auto_set*
	Default: 1
	
	enable automatically set cursor when jump candidate is only one.

*g:smalls_auto_set_min_input_length*
	Default: 3
	
	The minimum char to trigger auto_set.

*g:smalls_blink_on_auto_set*
	Default: 1

	Blink after automatically land to target when auto_set.

==============================================================================
FUNCTIONS						   *smalls-functions*

*smalls#start({mode})*
	Main function for this plugin.

*smalls#highlighter#extend_priority(table)*
	{table} is |Dictionary| which have following format.
	{ 'ColorName': Number...}
	Use this function to modify highlight color priority
	Here is  default color priority, higher value overwrite lower color.
>
	let s:priorities = {
	      \ 'SmallsShade':      101,
	      \ 'SmallsCandidate':  103,
	      \ 'SmallsRegion':     105,
	      \ 'SmallsCurrent':    107,
	      \ 'SmallsPos':        109,
	      \ 'SmallsJumpTarget': 111,
	      \ }
<
	if you don't want 'SmallsCandidate' is overwritten by SmallsRegion,
	|smalls-example|.


					       *smalls-keyboard-customization*
CAUTION~
Following functions are provided experimentally, it may change and obsoleted.
Use your own risk.
see |smalls-example|

*smalls#keyboard#cli#get_table()*
	return cli mode's key_table.
*smalls#keyboard#cli#extend_table(table)*
	{table} is |Dictionary| which is used to merged to default key table.

	Format~
	{ "KEY": '{action}' }
	ex) { "\<Esc>": 'do_cancel' }
	For available action, see |smalls-keyboard| section.

	To unbind action from key, use '<NOP>' special action.
	The key have '<NOP>' action is deleted at initialization.

*smalls#keyboard#cli#replace_table(table)*
	{table} is |Dictionary| is replaced from default key table.
	Use at your own risk.

*smalls#keyboard#excursion#get_table()*
*smalls#keyboard#excursion#extend_table(table)*
*smalls#keyboard#excursion#replace_table(table)*
	excursion mode version


==============================================================================
KEYBOARD					             *smalls-keyboard*

Smalls use independent CLI to read user's imput.
I'll explain this plugin specific keyboard keybinding in this section.
In future, user can customize or |extend()| you own key with |Dictionary|.

							  *smalls-cli-keybind*
CLI MODE KEYBIND~
cli-keyboard is basic keyboard used to search and trigger jump screen.
key map is following.

Type <F1> for help
	
						    *smalls-excursion-keybind*
EXCURSION MODE KEYBIND~
EXCURSION mode enable you to jump between candidate with 'hjkl'.
You can jump switch excursion mode from normal CLI mode

Type <F1> for help
                                                
==============================================================================
CONFIGURATION EXAMPLE					      *smalls-example*

set in your '.vimrc'
>
	" map normal-mode 's' for simple search
	nmap s <Plug>(smalls)
<
Additionally if you want use smalls in 'visual' or 'operator' or both mode.
>
	omap s <Plug>(smalls)
	xmap s <Plug>(smalls)
<
lower the priority of 'SmallsRegion' to show Candidate in region.
>
	smalls#highlighter#extend_priority({'SmallsRegion': 101})
<
------------------------------------------------------------------------------
(Experimental Feature)
Advanced keyboard customization
Read note in |smalls-keyboard-customization|.

Example-1: Add <C-g> and <C-j>
>
	let cli_table_custom = {
	      \ "\<C-g>": 'do_cancel',
	      \ "\<C-j>": 'do_jump',
	      \ }
        call smalls#keyboard#cli#extend_table(cli_table_custom)
<
Example-2: Disable default ';' in excursion mode
>
        call smalls#keyboard#excursion#extend_table({";": '<NOP>'})
<
==============================================================================
FAQ								 *smalls-faq*

Not included end of word char when invoked from operator mapping.
For example, d<Plug>(smalls)) not delete ')' char.

See |exclusive|, |inclusive| explanation.
If you want to inlcude end of word, you can force wise of motion by |o_v|.
For example, you can delete last ')' in above example, by
'd, v, o_<Plug>(smalls), )'. the 'v' is operator modifier that force
motion behave charwise, means operator affect same area as
charwise-visual. See |o_v|, |o_V|, |o_CTRL-V|.

============================================================================
BUG								 *smalls-bug*

Undojoin side-effect~
Jump-marker is accompalished by temporarily replace buffer with marker.
To avoid this temporal edit affect undo history, smalls use 'undojoin'.

To minimize this buffer editing effect to aff so 'undo' after
showing jump marker don't put cursor to original pos. This caused as the
side-effect of 'undojoin' to minimize effect

Operator visualization ara is not completetely precise~
As Vim's provided feature, you can change operator's default behavior by
forcing wise of motion such as |o_v|, |o_V|, |o_CTRL-V|.
These 'motion-modifier' enables you to forces some operator explicitly behave
as charwise, linewise, blockwise.
But smalls visualization for operator always assume motion is charwise,
because smalls plugin side have no way to know whether these motion-modifier
is specified or not.

============================================================================
TODO								*smalls-todo*

* [ ] skip concealed char?
* [ ] operator to combine smalls with text-object-function smalls within
  function and replace character which cli-C-R become useful.
* [ ] introduce smalls throughout multiwindow(multiwin-mode?)
      may be decline, technically it possible, but it not have much benefit.
      choosewin.vim helps most of demand.
* [x] improve to support 'c' operator
* [x] add auto_set or landing variable which finish and set cursor when 
      specified char exceed while single landing candidate.
* [ ] wildcard support
      [x] add '.' meta char which match one char
      [x] add '*' wildcard which match multiple chars
      [x] highlight 
      [ ] consider word adsjustment at landing time wordlen is vary depend on
	  match len of wildchar(but is wildchar useful? I don't think so).
* [x] rewrite region selection
 - add select()  action to pos.vim and select actually then use '`<', '`>' to
   get area of highlight. so need rewriten highlighter.region() action.
* [x] further flexible keyboard table setting
 - directly call excursion mode keybind from cli mode with introducing
   Ruby's method_missing like convention. => _actin_missing() implemented.
* [x] option to determine to jump destination whether word's first or end
 - not option, implemented as action.
* [x] jump between candidate with C-hjkl and C-n, C-p or <Tab> 
  and customizable
* specify search area
 - [x] harf-screen-above sk or S. [delete this feature]
 - [x] harf-screen-below sj or s. [delete this feature] 
 - [decline] right-col s-h
 - [decline] left-col  s-l
* [x] support operator , visual mode
 - [x] highlight selected region to easily understand affected area.
* [x] abstract keyboard object
 - [x] customizable keybind with user's |Dictionary|.
* [x] highlight original cursor pos when shade()ed.
* [decline] jump line with jump target on (screen middle col) or (screen left col)
* [x] skip folded area
* code cleanup [ 90 %]

============================================================================
SPECIAL NOTES							*smalls-note*

Unless Kim Silkebækken's great EasyMotion, 'smalls' would never be created.

   - EasyMotion
     https://github.com/Lokaltog/vim-easymotion

What I did is simply combine search feature to original great plugin.

==============================================================================
CHANGELOG						   *smalls-changelog*
2014-01-09:
	[new-feature] add new var |g:smalls_exit_at_notfound|.
	[behave-change] delete g:smalls_operator_motion_inclusive var.
2014-01-07:
	[bugfix] now properly recover undo history with |rundo| and |wundo|.
2014-01-04:
	[new-feature] descriptive help with <F1> on cli and excursion.
	[new-feature] experimental wildchar now support.
2013-11-29:
	- count support. rename var refactoring.
2013-11-25:
	- Critical bug fix, eliminate unnecessary global variables.
2013-11-22:
	- introduce g:smalls_current_mode for affiliation to statusline plugin
2013-11-20:
	- introduce g:smalls_operator_motion_inclusive variable.
2013-11-20:
	- del do_jump_wordend action.
	- now all operator moving is visualized and inclusive behavior.
2013-11-18:
	- fix keyboard customization issue for cli kbd.
2013-11-17:
	- add do_jump_wordend action in cli kbd.
2013-11-17: v0.9
	- delete 'forward' and 'backward', now only 'all' mode.
2013-11-17: v0.8
	- add easymotion style jump and a lot of improvement.
2013-10-25: v0.1
	- initial release
==============================================================================
vim:tw=78:ts=8:ft=help:norl:
